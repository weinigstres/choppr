Choppr – Project Instructions
Long-Term Vision
Choppr aims to be the definitive IT governance and operating-model platform. It will provide a holistic, data-driven model of “the business of IT,” uniting industry best-practices into one interactive system. The platform is based on the IT4IT™ reference architecture’s value-chain model
blog.opengroup.org
blog.invgate.com
, combined with COBIT’s governance principles and ITIL 4’s service-management practices. By aligning IT4IT’s end-to-end value streams (Strategy‑to‑Portfolio, Requirement‑to‑Deploy, Request‑to‑Fulfill, Detect‑to‑Correct)
blog.invgate.com
 with COBIT’s controls and ITIL’s service lifecycle, Choppr will ensure IT goals and risks are tied directly to business outcomes
auditboard.com
itsm.tools
. In the long run, Choppr will become the central source of truth for IT operating models and governance: an AI-augmented, extensible system that automatically adapts to new regulations and frameworks (e.g. the EU AI Act, DORA, ISO standards).
Integrated IT operating model: Provide a unified view of IT processes, value streams and data (common service model)
blog.opengroup.org
.
Framework-neutral architecture: Embrace and complement existing frameworks (ITIL, COBIT, ISO)
blog.opengroup.org
, while allowing easy updates as standards evolve.
Role-based profiles: Adapt process scope and complexity based on enterprise profile (Utility, Responder, Differentiator, etc.).
Dynamic compliance: Embed a living library of controls and references (ISO 27001, ITGC, DORA, AI Act, etc.) linked to processes.
MVP Scope
The MVP will implement core features to demonstrate Choppr’s value:
Interactive Value-Stream Map: A visual, zoomable map of all end-to-end IT value streams (extended IT4IT model). Users can click on each stream stage to see associated processes and data models. (Based on IT4IT v3)
blog.invgate.com
.
Profile-Driven Onboarding: A wizard that lets an organization select its operating profile (Utility/Responder/Differentiator) and automatically activates a predefined set of processes. Profiles adjust which processes are mandatory vs. optional.
Process Database: A centralized catalog of IT processes (with names, descriptions, roles) mapped to value streams and frameworks. All processes can be enabled/disabled per organization. The DB schema includes organizations, users, profiles, value_streams, processes, process_value_streams, org_selected_profile, org_enabled_processes, frameworks, process_framework_refs.
Risk & Control Library: A built-in repository of IT controls and risks drawn from standard frameworks. Initially, this includes IT General Controls (ITGC)
jumpcloud.com
, ISO 27001 controls, DORA requirements, the new EU AI Act rules, etc. Each control is tagged to related processes and can be managed in the system. For example, DORA (Digital Operational Resilience Act) defines ICT risk-management and testing requirements for financial entities
itgovernanceusa.com
. Choppr’s library will capture such regulations and link them to relevant IT processes.
Document Traceability: Ability to attach reference documents (policies, standards, SOPs) to processes. Every process record can list related approval records and external references (e.g. ISO clauses, COBIT objectives). This ensures full “cradle-to-grave” traceability of IT governance elements.
Governance Body Mapping: Define organizational bodies/committees and map which processes or changes they must approve. This models how decisions flow through, e.g. “Change Advisory Board approves change management processes.”
The MVP will not try to cover every edge case; instead, it focuses on demonstrating the platform’s core value: linking value streams, processes, and controls in one coherent model.
Tech Architecture Overview
Choppr is a full-stack web application. Its core stack consists of:
Backend – Supabase (PostgreSQL): We use Supabase as a hosted Postgres database with built-in Auth, Row-Level Security (RLS), and edge (serverless) functions. Supabase gives us a secure SQL database, user authentication, and RPC endpoints out of the box
support.bolt.new
. We will define RLS policies so that each org sees only its own data. For example, Supabase’s docs show enabling RLS on a table and adding a policy (e.g. CREATE POLICY "public can read instruments" ON public.instruments FOR SELECT TO anon USING (true)
supabase.com
). In Choppr, similar policies will isolate organizations’ processes, streams, and controls. Supabase also handles authentication and user management.
Frontend – Next.js (App Router): The web UI is built with Next.js (v13+) using the App Router paradigm
nextjs.org
. We will use TypeScript and React Server/Client Components. The UI is styled with Tailwind CSS – a modern utility-first framework that lets us rapidly compose responsive designs
tailwindcss.com
. (A Next.js starter with Supabase often includes Tailwind and TypeScript support
supabase.com
.) All pages and components are organized under the Next.js app/ directory, with dynamic routing for value streams, processes, etc. We will use Next.js server actions or edge functions for secure data mutations, and client components for interactive parts.
AI-Assisted Development – Bolt.dev: The development environment is Bolt (bolt.new), an AI-powered builder for web apps
support.bolt.new
. In Bolt, we will connect our Supabase project as the backend and code in a Next.js/Vite project. Bolt will aid by generating code snippets, UI components, and tests from natural-language prompts. (Bolt integrates with Supabase: it can automatically create the DB schema or claim a Bolt database to Supabase
support.bolt.new
.) We’ll frequently switch between code editing and Bolt’s chat to iterate on features. Bolt’s Claude agent is recommended for the most accurate builds
support.bolt.new
.
-- Example: Database schema overview (tables and key fields)
organizations (id UUID PK, name TEXT, domain TEXT, ...)
users (id UUID, email TEXT, organization_id UUID, ...)
profiles (id UUID, key TEXT, description TEXT, ...)
value_streams (id UUID, name TEXT, description TEXT, ...)
processes (id UUID, name TEXT, description TEXT, value_stream_id UUID)
process_value_streams (process_id UUID, value_stream_id UUID)
org_selected_profile (organization_id UUID, profile_id UUID)
org_enabled_processes (organization_id UUID, process_id UUID)
frameworks (id UUID, name TEXT)
process_framework_refs (process_id UUID, framework_id UUID, reference TEXT)
Design Principles
Choppr’s design follows clean architecture and user-centric principles:
Separation of Concerns: Keep layers discrete. Backend logic (data access, business rules) is completely separated from UI code. For example, all data access happens via well-defined Supabase functions or ORMs; React components consume only returned data. This follows industry principles of building discrete components not tightly coupled
learn.microsoft.com
.
Loose Coupling & Maintainability: Components communicate through explicit contracts/interfaces. Following SOLID and Clean Architecture ideas, modules should depend on abstractions. We ensure each React component or API function has a single responsibility. This leads to clean, testable code
learn.microsoft.com
.
Progressive Enhancement & Performance: The UI should work on all modern browsers and adapt to different devices (mobile-first design). We will leverage Tailwind’s responsive classes
tailwindcss.com
 and Next.js image optimization. Data should be fetched and cached efficiently (use Next.js caching or SWR).
Consistency & Brand: Use a consistent color palette, typography, and spacing system defined in Tailwind config. All components should adhere to a unified design language (buttons, forms, tables). Document this style guide as part of the repo.
Accessibility & UX: Follow WCAG guidance: semantic HTML, ARIA attributes for dynamic content, and keyboard navigation. Forms and dialogs should be screen-reader friendly.
Security by Design: Apply least-privilege. Use RLS policies in Supabase to enforce data isolation. Sanitize and validate all user input. Protect APIs with authentication and implement CSRF protections as needed.
Data-Driven UI: The visual map and dashboards should update in real-time to reflect the database state. Use WebSockets or server-sent events if live updates are needed (Supabase can stream changes), ensuring the UI always reflects current data.
AI-Assisted Development Expectations
Choppr’s codebase will be developed with Bolt.dev, an AI-enabled IDE that turns prompts into code
support.bolt.new
support.bolt.new
. In practice, developers will converse with Bolt in the chat interface to generate new features. For example, we might ask Bolt: “Create a Next.js page at /value-streams/[id] that fetches and displays a value stream’s details from Supabase.” Bolt will propose code (and even full-component scaffolding) in response. You should review and refine Bolt’s suggestions, editing them as needed. Bolt offers two modes: a faster legacy agent (v1) and a more powerful Claude agent
support.bolt.new
. For production-quality output, use Claude. The AI can also help write SQL queries, business logic, and even unit tests. Expect to use prompts like “refactor this component to use Tailwind” or “write an RPC to return all processes enabled for an organization.” In addition to code-gen, Bolt can suggest improvements. For example, ask “How can I improve the performance of the value-stream map?” and iterate. Always cite our data model in prompts (e.g. mention the processes and value_streams tables) so Bolt stays consistent with Choppr’s schema.
Bolt Context & Knowledge
To keep Bolt’s output consistent with the Choppr model, we supply the following context:
Domain Knowledge: Bolt must know we’re building an IT governance platform. Mention that “IT4IT splits the IT value chain into four streams”
blog.invgate.com
 and that we also align with COBIT and ITIL. In prompts, use terms like value_stream, process, risk_control, committee, profile, as defined above.
Data Model: Clearly define table names and key fields. (See schema snippet above.) When asking for data access code, refer to these tables exactly. For example, say “select from org_enabled_processes where organization_id = ...” so Bolt understands our RLS logic.
Feature Requirements: Remind Bolt which features are in-scope (see MVP list). If adding a new feature, relate it to existing components. E.g. “Add a feature to the ProcessList component so that it filters by selected profile.”
UI/Tech Conventions: The project uses Next.js App Router (file-based routing in /app), React components (prefer function components with hooks), and Tailwind CSS classes for styling
supabase.com
. We expect code to use TypeScript. Bolt should use our existing CSS classes and color tokens. Mention this style when requesting UI changes.
API Structure: All database access goes through Supabase client or Edge Functions. Indicate when to use supabase-js calls vs. fetch to our own endpoints. For example: “Write a Supabase query to get all profiles for the logged-in user’s org.”
Naming Conventions: Use consistent names like Choppr for the app, prefix Supabase tables with snake_case, use PascalCase for React components (e.g. ValueStreamMap). Follow common patterns (e.g. getServerSession for auth).
Avoid Repetition: Since Bolt tends to repeat itself, instruct it to be concise. For example, “Write only the relevant component code, not the entire page scaffolding” or “Do not include non-essential comments.”
Example Prompts: Providing example directives helps: e.g., “Generate a Tailwind card component to display a process name and description.”
By embedding these guidelines into the AI chat, we ensure Bolt’s suggestions stay aligned with Choppr’s vision and architecture. Always review Bolt’s output for correctness and consistency.
Citations

IT4IT™ Reference Architecture Version 2.0, an Open Group Standard - The Open Group Blog

https://blog.opengroup.org/2015/10/22/it4it-reference-architecture-version-2-0-an-open-group-standard/

The Definitive Guide to ITSM Frameworks [+Free Downloadable Cheat Sheet]

https://blog.invgate.com/itsm-frameworks

COBIT Guide: Principles, Enablers & IT Governance Explained

https://auditboard.com/blog/cobit

ITIL 4 Explained: Framework, Practices, and Key Changes

https://itsm.tools/itil-4-explained/

IT4IT™ Reference Architecture Version 2.0, an Open Group Standard - The Open Group Blog

https://blog.opengroup.org/2015/10/22/it4it-reference-architecture-version-2-0-an-open-group-standard/

Definition & Examples of IT General Controls (ITGC) - JumpCloud

https://jumpcloud.com/blog/what-are-it-general-controls-itgc

EU DORA (Digital Operational Resilience Act) compliance | IT Governance USA

https://www.itgovernanceusa.com/eu-digital-operational-resilience-act

Supabase for databases - Bolt

https://support.bolt.new/integrations/supabase

Use Supabase with Next.js | Supabase Docs

https://supabase.com/docs/guides/getting-started/quickstarts/nextjs

Introduction: App Router | Next.js

https://nextjs.org/docs/13/app

Tailwind CSS - Rapidly build modern websites without ever leaving your HTML.

https://tailwindcss.com/

Use Supabase with Next.js | Supabase Docs

https://supabase.com/docs/guides/getting-started/quickstarts/nextjs

Introduction to Bolt - Bolt

https://support.bolt.new/building/intro-bolt

Introduction to Bolt - Bolt

https://support.bolt.new/building/intro-bolt

Architectural principles - .NET | Microsoft Learn

https://learn.microsoft.com/en-us/dotnet/architecture/modern-web-apps-azure/architectural-principles

Introduction to Bolt - Bolt

https://support.bolt.new/building/intro-bolt